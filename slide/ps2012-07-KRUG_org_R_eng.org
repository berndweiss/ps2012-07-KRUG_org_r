#+STARTUP: indent

# IMPORTANT: run (org-babel-execute-buffer) first!
# see 6 Using Custom Classes at http://orgmode.org/worg/org-tutorials/org-latex-export.html 
# and http://emacs-fu.blogspot.com/2009/10/writing-presentations-with-org-mode-and.html


#+TITLE: A brief introduction to\newline reproducible research with\newline Emacs' Org mode and R
#+AUTHOR: Bernd Wei√ü
#+DATE: \footnotesize{2012-07-06}
#+DESCRIPTION:
#+KEYWORDS:
#+LANGUAGE:  en
#+OPTIONS:   H:3 num:t toc:t \n:nil @:t ::t |:t ^:t -:t f:t *:t <:t
#+OPTIONS:   TeX:t LaTeX:t skip:nil d:nil todo:t pri:nil tags:not-in-toc
#+INFOJS_OPT: view:nil toc:nil ltoc:t mouse:underline buttons:0 path:http://orgmode.org/org-info.js
#+EXPORT_SELECT_TAGS: export
#+EXPORT_EXCLUDE_TAGS: noexport
#+LINK_UP:
#+LINK_HOME:
#+XSLT:


# Babel settings
#+PROPERTY: session *R*
#+PROPERTY: tangle ../src/ps2012-07-KRUG_org_R.R
#+PROPERTY: comments yes
#+PROPERTY: results output
#+PROPERTY: exports both


#+startup: beamer
#+LaTeX_CLASS: beamer
#+LaTeX_CLASS_OPTIONS: [bigger]
#+LaTeX_HEADER: \institute{\url{http://berndweiss.net} \\ \url{bernd.weiss@uni-koeln.de}}
#+latex_header: \mode<beamer>{\usecolortheme{seagull}}



#+BEAMER_FRAME_LEVEL: 3

#+LATEX_HEADER: \usepackage{attrib}

#+LATEX_HEADER: \usepackage[T1]{fontenc}
#+LATEX_HEADER: \usepackage{tikz}
#+LATEX_HEADER: \usepackage[english]{babel}
#+LATEX_HEADER: \usepackage{graphicx}
#+LATEX_HEADER: \usepackage{tabularx}
#+LATEX_HEADER: \usepackage{amsmath}
#+LATEX_HEADER: \usepackage{bm}
#+LATEX_HEADER: \usepackage[babel]{csquotes}
#+LaTeX_HEADER: \usepackage{blindtext} 
#+latex_header: \usepackage{helvet} %\usepackage{lucidabr}

#+latex_header: \AtBeginSection[]{ \begin{frame} \frametitle{Topic} \begin{footnotesize} \tableofcontents[currentsection, currentsubsection] \end{footnotesize} \end{frame} }

#+latex_header: \AtBeginSubsection[]{ \begin{frame} \frametitle{Topic} \begin{footnotesize} \tableofcontents[currentsection, currentsubsection] \end{footnotesize} \end{frame} }


#+latex_header: \hypersetup{colorlinks=true, urlcolor=cyan, linkcolor=black}
#latex_header: \mode<beamer>{\usetheme[wiso]{UzK}}


#+begin_LaTeX
\definecolor{dkgreen}{rgb}{0,0.5,0}
\definecolor{dkred}{rgb}{0.5,0,0}
\definecolor{gray}{rgb}{0.5,0.5,0.5}

\lstset{basicstyle=\ttfamily\bfseries\footnotesize,
morekeywords={virtualinvoke},
%%keywordstyle=\color{blue},
%%ndkeywordstyle=\color{red},
commentstyle=\color{dkred},
%%stringstyle=\color{dkgreen},
numbers=left,
numberstyle=\ttfamily\tiny\color{gray},
stepnumber=1,
numbersep=10pt,
backgroundcolor=\color{white},
tabsize=4,
showspaces=false,
showstringspaces=false,
xleftmargin=.23in
}
#+end_LaTeX


# todo:
# - fix base graphics
# - fix inline code
# - http://www.damtp.cam.ac.uk/user/sje30/ess11/ess-slides.pdf
# - http://www.damtp.cam.ac.uk/user/sje30/ess11/


* Disclaimer and Acknowledgment

** 

*** Disclaimer and Acknowledgment
- I am by no means an expert user of Org mode or Org Babel. However, I know
  enough to acknowledge the incredible work of Carsten Dominik (created Org in 2003), Eric Schulte and Dan Davison (developed the Babel functionality within Org).
- All materials can be found on github: https://github.com/berndweiss/ps2012-07-KRUG_org_r


* Introduction

** Motivating problem

*** Motivating problem

- Writing an empirical research paper
  - is almost never a linear process.
  - also means that your colleagues need to trust you. However, how can I make them
    trust me?
- So, we need a tool that provides
  - "dynamic elements", i.e. updates tables and graphs every time the data gets updated.
  - full access to code to check for correctness (i.e. "reproducible research").


*** Literate programming and reproducible research

- *Literate programming (LP)* :: Enhances traditional software development by
     embedding code in explanatory essays and encourages treating the
     act of development as one of communication with future
     maintainers.

- *Reproducible research (RR)* :: Embeds executable code in research reports
     and publications, with the aim of allowing readers to re-run the
     analyses described.

     
(Source: Schulte et al. 2012: 3)


***  Existing tools

#+Attr_LaTeX: align=l|ccccc placement=[t!]\footnotesize
|           |         |     | LaTeX  | HTML   |          |
| Tool      | LP      | RR  | Export | Export | Language |
|-----------+---------+-----+--------+--------+----------|
| [[latex:proglang][Javadoc]]   | partial | no  | no     | yes    | [[latex:proglang][Java]]     |
| [[latex:proglang][POD]]       | partial | no  | no     | yes    | [[latex:proglang][Perl]]     |
| [[latex:proglang][Haskell]]   | partial | no  | yes    | yes    | [[latex:proglang][Haskell]]  |
| [[latex:proglang][noweb]]     | yes     | no  | yes    | yes    | any      |
| [[latex:proglang][cweb]]      | yes     | no  | yes    | yes    | [[latex:proglang][C]]/[[latex:proglang][C++]]    |
| [[latex:proglang][Sweave]]    | partial | yes | yes    | yes    | [[latex:proglang][R]]        |
| [[latex:proglang][SASweave]]  | partial | yes | yes    | yes    | [[latex:proglang][R]]/[[latex:proglang][SAS]]    |
| [[latex:proglang][Statweave]] | partial | yes | yes    | yes    | any      |
| [[latex:proglang][Scribble]]  | yes     | yes | yes    | yes    | [[latex:proglang][scheme]]   |
| Knitr     | partial | yes | yes    | yes    | R        |
| dexy      | yes     | yes | yes    | yes    | any      |
| [[latex:proglang][Org-mode]]  | yes     | yes | yes    | yes    | any      |

(Source: Schulte et al. 2012: 6, modified and updated)


** Emacs

*** Emacs -- a brief overview
- Emacs is a text editor 
- It is highly extensible and customizable (using a Lisp dialect called Emacs Lisp)
- Emacs stands for "Editor MACroS"
- Development began in the 1970s, the current version is 24.1
- I use Emacs mostly for writing R and \LaTeX-code
- Emacs knows content-sensitive editing (major and minor) /modes/, including syntax coloring, for
  a variety of file types (R, \LaTeX, C, C++, Python, plain text, HTML, ...)

(Source: http://www.gnu.org/software/emacs/, http://en.wikipedia.org/wiki/Emacs)


*** Screen shot of an Emacs session

#+ATTR_LaTeX: width = 0.8\linewidth
[[file:e:/projects/confer/ps2012-07-KRUG_org_r/fig/f_emacs_screenshot.png]]


** Org mode

*** Org mode
- Org is an Emacs (major) mode for notes, planning, and authoring
- Org files are plain-text files
- I use Org for
  - writing technical documents (can be exported to PDF via pdfLaTeX or HTML) or
    creating slides
  - organizing my professional and private life (appointments, todo lists, ...)
  - maintaining my personal "knowledge base"
  - ...
- More infos on http://www.orgmode.org (tutorials, videos, ...)



*** An example Org file (source file)                               :B_frame:
:PROPERTIES:
:BEAMER_env: frame
:BEAMER_envargs: [shrink = 25]
:END:

#+INCLUDE: "../src/org_example.org" src org

#+BEGIN_SRC sh :session *SH* :results silent :exports none :cache yes
#cd E:\projects\confer\ps2012-07-KRUG_org_r\slide
#emacs.exe -batch --visit=../src/org_example.org --funcall org-export-as-pdf
#mv ../src/org_example.pdf ../fig/
#pdfcrop ../fig/org_example.pdf ../fig/org_example.pdf
#+END_SRC


*** An example Org file (exported to PDF)

#+attr_latex: clip, width = 0.6\linewidth 
[[file:e:/projects/confer/ps2012-07-KRUG_org_r/fig/org_example.pdf]]


** Babel: Active code in Org mode

*** Babel: Active code in Org mode

#+BEGIN_QUOTE
Babel is about letting many different languages work together. Programming languages live in blocks inside natural language Org-mode documents. A piece of data may pass from a table to a Python code block, then maybe move on to an R code block, and finally end up embedded as a value in the middle of a paragraph or possibly pass through a gnuplot code block and end up as a plot embedded in the document.
#+END_QUOTE
(Source: http://orgmode.org/worg/org-contrib/babel/intro.html)


*** Using code with(in) Org mode

#+begin_LaTeX
  \usetikzlibrary{shapes,arrows,shadows,decorations,decorations.text,through}
  \tikzstyle{page} = [rectangle, draw, text width=9em,
  text centered, rounded corners,
  node distance=3cm, minimum height=1em,
  font=\tiny,
  fill=blue!20,
  general shadow={
    fill=black!30,
    shadow xshift=0.16cm,
    shadow yshift=-0.16cm
  },
  very thick,
  draw=blue]
  \begin{figure}[t!]
    \centering

%% Scale TIkZ figure
%% Source: http://stackoverflow.com/questions/2239328/control-font-size-in-graphics-in-latex-when-scaling-in-minipage-subfig
    \begin{tikzpicture}[->,>=stealth', shorten >=1pt, auto, transform canvas={scale=0.55}]
      \node [page] (org) at (0,0) {
        \begin{center}
          \normalsize{Org-mode}
        \end{center}
  \begin{verbatim}
    * Plain Text Markup
    - prose composition
    - code composition
    - data analysis

  ,  #+begin_src C :tangle run.c
      int main(){
        return 0;
      }
  ,  #+end_src

  ,  #+headers: :results graphics
  ,  #+begin_src R :file fig.pdf
      plot(data)
  ,  #+end_src

  \end{verbatim}
      };

      \node [page] (htm) at (8,1) {
        \begin{center}
          \normalsize{HTML}
        \end{center}
  \begin{verbatim}
    <h1>Plain Text Markup</h1>
    <ul>
    <li>prose composition</li>
    <li>code composition</li>
    <li>data analysis</li>
    </ul>
  \end{verbatim}
      };

      \node [page] (tex) at (9,-1) {
        \begin{center}
          \normalsize{\LaTeX{}}
        \end{center}
  \begin{verbatim}
    \Section{Plain Text Markup}
    \begin{itemize}
    \item prose composition
    \item code composition
    \item data analysis
    \end{itemize}
  \end{verbatim}
      };

      \node [page, text width=6.5em] (src) at (-8,0) {
        \begin{center}
          \normalsize{Source Code}
        \end{center}
  \begin{verbatim}
    int main(){
      return 0;
    }
  \end{verbatim}
      };

      \node [text width=8em] (code-out) at (4,-6) {Embedded data and
        source code in arbitrary\\ languages};

      \node [text width=8em] (code-out) at (-4,-6) {Raw output,
        tabular data, figures, etc.};

      \path (org) edge [loop below] node {\small{Code Evaluation}} (
      \path (org) edge node {\small{Export}} (5.25,0);
      \path (org) edge node [above, text width=4.25em] {\small{Code\\  Extraction}} (-5.875,0);
      \path (org) edge node [below] {\small{(Weave)}} (5.25,0);
      \path (org) edge node [below] {\small{(Tangle)}} (-5.875,0);
    \end{tikzpicture}
  \end{figure}
\vspace{3cm}
\vfill
Source: Schulte et al. (2012)
#+end_LaTeX


* Babel and R

** Introduction

*** The structure of Org code blocks                              :B_frame:
:PROPERTIES:
:BEAMER_env: frame
:END:

\begin{small}
#+BEGIN_EXAMPLE
#+NAME: <name>
#+BEGIN_SRC <language> <switches> <header arguments>
 <body>
#+END_SRC
#+END_EXAMPLE
\end{small}



*** R code blocks I (exports code and results)
:PROPERTIES:
:BEAMER_env: columns
:BEAMER_envargs: [t, shrink = 15]
:END:

**** R code block                                                  :B_column:
:PROPERTIES:
:BEAMER_env: block
:END:
#+BEGIN_EXAMPLE
This is a short sentence. This is another sentence. 
And, finally, here comes some R code:

#+BEGIN_SRC R
set.seed(1)
x1 <- rnorm(100) 
mean(x1) 
x1.sd <- sd(x1) 
#+END_SRC

#+RESULTS:
: [1] 0.1088874

#+END_EXAMPLE

**** Evaluated and exported R code block                           :B_column:
:PROPERTIES:
:BEAMER_env: block
:END:

This is a short sentence. This is another sentence. And, finally, here comes some R code:
#+BEGIN_SRC R
set.seed(1)
x1 <- rnorm(100)
mean(x1)
x1.sd <- sd(x1)
#+END_SRC

#+RESULTS:
: [1] 0.1088874


*** R code blocks II (exports only results)
:PROPERTIES:
:BEAMER_env: columns
:BEAMER_envargs: [t, shrink = 15]
:END:

**** R code block                                                  :B_column:
:PROPERTIES:
:BEAMER_env: block
:END:
#+BEGIN_EXAMPLE
This is a short sentence. Hey, there is another 
sentence. And, finally, here comes some R code:

#+BEGIN_SRC R :results output :exports results
set.seed(1)
x1 <- rnorm(100) 
mean(x1) 
x1.sd <- sd(x1) 
#+END_SRC

#+RESULTS:
: [1] 0.1088874

#+END_EXAMPLE

**** Evaluated and exported R code block                           :B_column:
:PROPERTIES:
:BEAMER_env: block
:END:

This is a short sentence.  Hey, there is another sentence. And, finally, here comes some R code:

#+BEGIN_SRC R :results output :exports results
set.seed(1)
x1 <- rnorm(100)
mean(x1)
x1.sd <- sd(x1)
#+END_SRC

#+RESULTS:
: [1] 0.1088874



*** R inline code blocks (source)                                   :B_frame:
:PROPERTIES:
:BEAMER_env: frame
:BEAMER_ENVARGS: [shrink = 20]
:END:

\begin{footnotesize}
#+BEGIN_EXAMPLE
The mean of x is 
src_R[:exports results :results value raw]{round(mean(x1), 3)}
and the standard error is 
src_R[:exports results :results value raw]{round(x1.sd, 3)}. 
Remember that the vectors =x1= and =x1.sd= have been defined 
on the previous slide in a separate code block.
#+END_EXAMPLE
\end{footnotesize}

*** R inline code blocks (evaluated)                                :B_block:

The mean of x is src_R[:exports results :results value raw]{round(mean(x1), 3)}
and the standard error is 
src_R[:exports results :results value raw]{round(x1.sd, 3)}. Remember that the
vector =x1= has been defined on the previous slide in a separate code block.



*** Creating a base graphics plot (source)                               

#+BEGIN_EXAMPLE -n
#+headers: :exports both 
#+headers: :results graphics
#+headers: :file img.pdf
#+begin_src R 
x <- rnorm(100)
hist(x)
#+end_src 

#+RESULTS:
[[file:img.pdf]]

#+END_EXAMPLE


*** Creating a base graphics plot (evaluated)

#+headers: :exports code
#+headers: :results graphics
#+headers: :file ../fig/f_baseplot.pdf
#+begin_src R 
x <- rnorm(100)
hist(x, main = "")
#+end_src 

#+RESULTS:
[[file:../fig/f_baseplot.pdf]]


#+attr_latex: width = 0.6\linewidth
[[file:../fig/f_baseplot.pdf]]


*** Creating a =ggplot2= plot (Org source)                                 

#+BEGIN_EXAMPLE -n
#+headers: :exports results 
#+headers: :results graphics
#+headers: :file f_ggplot2_ex.pdf
#+begin_src R 
library(ggplot2)
x <- data.frame(var = rnorm(100))
ggplot(aes(x = var), data = x) 
      + geom_histogram()
#+end_src 

#+RESULTS:
[[file:f_ggplot2_ex.pdf]]

#+END_EXAMPLE


*** Creating a =ggplot2= plot (evaluated)                                 

#+headers: :exports none
#+headers: :results graphics
#+headers: :file ../fig/f_ggplot2_example.pdf 
#+begin_src R 
library(ggplot2)
x <- data.frame(var = rnorm(100))
ggplot(aes(x = var), data = x) + geom_histogram()
#+end_src 

#+RESULTS:
[[file:../fig/f_ggplot2_example.pdf]]

#+attr_latex: width = 0.7\linewidth
[[file:../fig/f_ggplot2_example.pdf]]


** Tangling and weaving

*** Tangling and weaving code

- /Weaving/ refers to the exportation of a mixed code/prose document to a format
  that can be read by a human (HTML, \LaTeX, Ascii, ...).
- /Tangling/ means to extract only the code to a separate file 

(Source: Schulte et al. 2012: 12)


*** Example of code tangling 

#+BEGIN_EXAMPLE
#+BEGIN_SRC R :tangle ../src/example_tangled.R 
## Comment: Assign value 1 to variable x
x <- 1
#+END_SRC
#+END_EXAMPLE

#+BEGIN_SRC R :tangle ../src/example_tangled.R :exports none
## Comment: Assign value 1 to variable x
x <- 1
#+END_SRC

#+RESULTS:



*** Example (cont'd): Tangled R code

Here is the content of =../src/example_tangled.R=

**** =../src/example_tangled.R=
:PROPERTIES:
:BEAMER_env: block
:END:
\begin{footnotesize}
#+INCLUDE: "../src/example_tangled.R" example 
\end{footnotesize}


** A short example

*** A short example

See =pub/d_example.org= and =pub/d_example.pdf=.




** A brief Org example

*** A brief Org example

See =pub/d_example.org= and =pub/d_example.pdf=.


* R and other languages (Python)

** 

*** Chaining (source)                                               :B_frame:
:PROPERTIES:
:BEAMER_env: frame
:BEAMER_envargs: [shrink = 10]
:END:


#+BEGIN_SRC org
,Define variable =y= in a Python code block: 
,#+name: chainexamp
,#+begin_src python :results value :session *python*
,y = 10**4
,y
,#+end_src

,#+RESULTS: chainexamp
,: 10000

,Then pass variable =y= to an R code block:
,#+BEGIN_SRC R :var x=chainexamp :session *R2*
,print(x)
,print(x*2)
,#+END_SRC

,#+RESULTS:
,: [1] 10000
,: [1] 20000
#+END_SRC



*** Chaining (evaluated)

Define variable =y= in a Python code block: 
#+name: chainexamp
#+begin_src python :results value :session *python*
y = 10**4
y
#+end_src

#+RESULTS: chainexamp
: 10000


Then pass variable =y= to an R code block:
#+BEGIN_SRC R :var x=chainexamp :session *R2*
print(x)
print(x*2)
#+END_SRC

#+RESULTS:
: [1] 10000
: [1] 20000




* References

** 

*** References

- Schulte, Eric, Dan Davison, Thomas Dye, und Carsten Dominik. 2012. A
  Multi-Language Computing Environment for Literate Programming and Reproducible
  Research. Journal of Statistical Software 46: 1‚Äì24.  
- http://orgmode.org/worg/org-contrib/babel/how-to-use-Org-Babel-for-R.html
